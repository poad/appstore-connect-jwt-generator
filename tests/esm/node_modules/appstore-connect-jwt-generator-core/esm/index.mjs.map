{"version":3,"sources":["../src/esm/index.mts"],"names":[],"mappings":"AAAA,OAAO,SAAS,eAAe;AAE/B,MAAM,aAAa,CACjB,UACA,cACA,WACqB,CAAA;QACrB,WAAW;QACX,OAAO;QACP,UAAU;QACV,WAAW;QACX,QAAQ;IACV,CAAA;AAEA,SAAS,aAAa,CAAC;AAEvB,OAAO,SAAS,UACd,UAA2B,EAC3B,QAAgB,EAChB,YAAoB,EACpB,WAAmB,GAAG,EACd;IAAE,OAAO,IAAI,IAAI,CAAC,CAAC,GAAG,YAAY,WAAW,UAAU,cAAc;AAAY,CAAC;AAE5F,OAAO,eAAe,MACpB,UAA2B,EAC3B,QAAgB,EAChB,YAAoB,EACpB,WAAmB,GAAG,EACL;IACjB,OAAO,QAAQ,OAAO,CACpB,IAAI,IAAI,CAAC,CAAC,GAAG,YAAY,WAAW,UAAU,cAAc;AAEhE,CAAC;AAED,WAAW,SAAS,GAAG;AACvB,WAAW,KAAK,GAAG;AAEnB,eAAe,WAAW","file":"index.mjs","sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst signOption = (\n  issuerId: string,\n  privateKeyId: string,\n  duration: number,\n): jwt.SignOptions => ({\n  algorithm: 'ES256',\n  keyid: privateKeyId,\n  audience: 'appstoreconnect-v1',\n  expiresIn: duration,\n  issuer: issuerId,\n});\n\nfunction jwtGenCore() {}\n\nexport function tokenSync(\n  privateKey: string | Buffer,\n  issuerId: string,\n  privateKeyId: string,\n  duration: number = 500,\n): string { return jwt.sign({}, privateKey, signOption(issuerId, privateKeyId, duration)); };\n\nexport async function token(\n  privateKey: string | Buffer,\n  issuerId: string,\n  privateKeyId: string,\n  duration: number = 500,\n): Promise<string> {\n  return Promise.resolve(\n    jwt.sign({}, privateKey, signOption(issuerId, privateKeyId, duration))\n  );\n};\n\njwtGenCore.tokenSync = tokenSync;\njwtGenCore.token = token;\n\nexport default jwtGenCore;\n"]}