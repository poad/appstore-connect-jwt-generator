{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAG,KAAM,CAAc,cAE9B,MAAM,CAAC,GAAM,2BACX,KAAK,CAAC,CAAU,EACd,CAAgB,CAChB,CAAoB,CACpB,CAAgB,IACK,CAAC,AACtB,SAAS,CAAE,CAAO,OAClB,KAAK,CAAE,CAAY,CACnB,QAAQ,CAAE,CAAoB,oBAC9B,SAAS,CAAE,CAAQ,CACnB,MAAM,CAAE,CAAQ,AAClB,CAAC,IACY,SAAS,EACpB,CAA2B,CAC3B,CAAgB,CAChB,CAAoB,CACpB,CAAgB,CAAG,GAAG,GACX,CAAG,CAAC,IAAI,kBAAK,CAAU,CAAE,CAAU,CAAC,CAAQ,CAAE,CAAY,CAAE,CAAQ,KAEpE,KAAK,OAChB,CAA2B,CAC3B,CAAgB,CAChB,CAAoB,CACpB,CAAgB,CAAG,GAAG,GACF,OAAO,CAAC,OAAO,CACnC,CAAG,CAAC,IAAI,kBAAK,CAAU,CAAE,CAAU,CAAC,CAAQ,CAAE,CAAY,CAAE,CAAQ,KAzB1D,YAAY,GAAZ,YAAY","file":"dist","sourcesContent":["import jwt from 'jsonwebtoken';\n\nexport module JwtGenerator {\n  const signOption = (\n    issuerId: string,\n    privateKeyId: string,\n    duration: number,\n  ): jwt.SignOptions => ({\n    algorithm: 'ES256',\n    keyid: privateKeyId,\n    audience: 'appstoreconnect-v1',\n    expiresIn: duration,\n    issuer: issuerId,\n  });\n  export const tokenSync = (\n    privateKey: string | Buffer,\n    issuerId: string,\n    privateKeyId: string,\n    duration: number = 500,\n  ): string => jwt.sign({}, privateKey, signOption(issuerId, privateKeyId, duration));\n\n  export const token = async (\n    privateKey: string | Buffer,\n    issuerId: string,\n    privateKeyId: string,\n    duration: number = 500,\n  ): Promise<string> => Promise.resolve(\n    jwt.sign({}, privateKey, signOption(issuerId, privateKeyId, duration)),\n  );\n}\n\nexport default JwtGenerator;\n"]}