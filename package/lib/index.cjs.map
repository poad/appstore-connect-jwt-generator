{"version":3,"sources":["../src/cjs/index.cts"],"names":[],"mappings":"2MAuCA,OAA0B,mBAA1B,UAhBsB,KAAK,mBAAL,OAPN,SAAS,mBAAT,kEAhBA,qGAEhB,MAAM,WAAa,CACjB,SACA,aACA,WACqB,CAAA,CACrB,UAAW,QACX,MAAO,aACP,SAAU,qBACV,UAAW,SACX,OAAQ,QACV,CAAA,EAEA,SAAS,aAAe,CAEjB,SAAS,UACd,UAA2B,CAC3B,QAAgB,CAChB,YAAoB,CACpB,SAAmB,GAAG,EACZ,OAAO,qBAAG,CAAC,IAAI,kBAAK,WAAY,WAAW,SAAU,aAAc,UAAY,CAEpF,eAAe,MACpB,UAA2B,CAC3B,QAAgB,CAChB,YAAoB,CACpB,SAAmB,GAAG,EAEtB,OAAO,QAAQ,OAAO,CACpB,qBAAG,CAAC,IAAI,kBAAK,WAAY,WAAW,SAAU,aAAc,WAEhE,CAEA,WAAW,SAAS,CAAG,SACvB,CAAA,WAAW,KAAK,CAAG,KAEnB,CAAA,OAAO,OAAO,CAAG,QAAU,iBAE3B,SAAe","file":"index.cjs","sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst signOption = (\n  issuerId: string,\n  privateKeyId: string,\n  duration: number,\n): jwt.SignOptions => ({\n  algorithm: 'ES256',\n  keyid: privateKeyId,\n  audience: 'appstoreconnect-v1',\n  expiresIn: duration,\n  issuer: issuerId,\n});\n\nfunction jwtGenCore() { }\n\nexport function tokenSync(\n  privateKey: string | Buffer,\n  issuerId: string,\n  privateKeyId: string,\n  duration: number = 500,\n): string { return jwt.sign({}, privateKey, signOption(issuerId, privateKeyId, duration)); };\n\nexport async function token(\n  privateKey: string | Buffer,\n  issuerId: string,\n  privateKeyId: string,\n  duration: number = 500,\n): Promise<string> {\n  return Promise.resolve(\n    jwt.sign({}, privateKey, signOption(issuerId, privateKeyId, duration))\n  );\n};\n\njwtGenCore.tokenSync = tokenSync;\njwtGenCore.token = token;\n\nmodule.exports = exports = jwtGenCore;\n\nexport default jwtGenCore;\n"]}