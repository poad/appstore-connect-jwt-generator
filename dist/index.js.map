{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\n\nexport module JwtGenerator {\n  const signOption = (\n    issuerId: string,\n    privateKeyId: string,\n    duration: number,\n  ): jwt.SignOptions => ({\n    algorithm: 'ES256',\n    keyid: privateKeyId,\n    audience: 'appstoreconnect-v1',\n    expiresIn: duration,\n    issuer: issuerId,\n  });\n  export const tokenSync = (\n    privateKey: string | Buffer,\n    issuerId: string,\n    privateKeyId: string,\n    duration: number = 500,\n  ): string => jwt.sign({}, privateKey, signOption(issuerId, privateKeyId, duration));\n\n  export const token = async (\n    privateKey: string | Buffer,\n    issuerId: string,\n    privateKeyId: string,\n    duration: number = 500,\n  ): Promise<string> => Promise.resolve(\n    jwt.sign({}, privateKey, signOption(issuerId, privateKeyId, duration)),\n  );\n}\n\nexport default JwtGenerator;\n"],"names":["jwt"],"mappings":"AAAA,MAAM,CAACA,CAAG,MAAM,CAAc;AAE9B,MAAM,CAAC,GAAM;;IACX,KAAK,CAAC,CAAU,IACd,CAAgB,EAChB,CAAoB,EACpB,CAAgB,IACK,CAAC;YACtB,SAAS,EAAE,CAAO;YAClB,KAAK,EAAE,CAAY;YACnB,QAAQ,EAAE,CAAoB;YAC9B,SAAS,EAAE,CAAQ;YACnB,MAAM,EAAE,CAAQ;QAClB,CAAC;;MACY,SAAS,IACpB,CAA2B,EAC3B,CAAgB,EAChB,CAAoB,EACpB,CAAgB,GAAG,GAAG,GACX,CAAG,CAAC,IAAI,mBAAK,CAAU,EAAE,CAAU,CAAC,CAAQ,EAAE,CAAY,EAAE,CAAQ;QAEpE,KAAK,UAChB,CAA2B,EAC3B,CAAgB,EAChB,CAAoB,EACpB,CAAgB,GAAG,GAAG,GACF,OAAO,CAAC,OAAO,CACnC,CAAG,CAAC,IAAI,mBAAK,CAAU,EAAE,CAAU,CAAC,CAAQ,EAAE,CAAY,EAAE,CAAQ;;EAzB1D,YAAY,KAAZ,YAAY"}